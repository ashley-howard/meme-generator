{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","html2canvas","document","querySelector","useCORS","canvas","tab","window","open","body","appendChild","close","className","type","placeholder","onChange","onClick","saveImg","id","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUAceA,MAZf,WACI,OACI,gCACI,yBACIC,IAAI,iEACJC,IAAI,aAER,+CC4EGC,E,YAhFX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATV,E,iFAYO,IAAD,OAChBE,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACPE,EAAUF,EAASG,KAAnBD,MACR,EAAKE,SAAS,CAAEV,YAAaQ,S,mCAI5BG,GAAQ,IAAD,EACQA,EAAMC,OAAtBC,EADQ,EACRA,KAAMC,EADE,EACFA,MACdC,KAAKL,SAAL,eAAiBG,EAAOC,M,mCAGfH,GACTA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC5DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAASM,IACpDR,KAAKL,SAAS,CAAEX,UAAWuB,M,8BAGvBX,GACJA,EAAMK,iBACNQ,IAAYC,SAASC,cAAc,YAAa,CAC5CC,SAAS,IACVtB,MAAK,SAAAuB,GAEJ,IAAIC,EAAMC,OAAOC,KAAK,cAAe,UACrCF,EAAIJ,SAASO,KAAKC,YAAYL,GAC9BC,EAAIJ,SAASS,a,+BAKjB,OACI,yBAAKC,UAAU,aACX,0BAAMA,UAAU,aAChB,kBAAC,EAAD,MAEI,2BACIC,KAAK,OACLvB,KAAK,UACLwB,YAAY,WACZvB,MAAOC,KAAKnB,MAAMC,QAClByC,SAAUvB,KAAKd,eAEnB,2BACImC,KAAK,OACLvB,KAAK,aACLwB,YAAY,cACZvB,MAAOC,KAAKnB,MAAME,WAClBwC,SAAUvB,KAAKd,eAGnB,4BAAQsC,QAASxB,KAAKZ,cAAtB,cACA,4BAAQoC,QAASxB,KAAKyB,SAAtB,SAEJ,8BACA,yBAAKL,UAAU,OAAOM,GAAG,WACrB,yBAAKhD,IAAKsB,KAAKnB,MAAMG,UAAWL,IAAI,QACpC,wBAAIyC,UAAU,OAAOpB,KAAKnB,MAAMC,SAChC,wBAAIsC,UAAU,UAAUpB,KAAKnB,MAAME,kB,GA1E3B4C,aCWbC,MATf,WACE,OACE,6BAEE,kBAAC,EAAD,QCEcC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,kB","file":"static/js/main.85cbaac6.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <img \r\n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \r\n                alt=\"Problem?\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { Component } from \"react\";\r\nimport html2canvas from 'html2canvas';\r\nimport Header from \"./Header\"\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { memes } = response.data\r\n                this.setState({ allMemeImgs: memes })\r\n            })\r\n    }\r\n\r\n    handleChange(event) {\r\n        const { name, value } = event.target\r\n        this.setState({ [name]: value })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randMemeImg = this.state.allMemeImgs[randNum].url\r\n        this.setState({ randomImg: randMemeImg })\r\n    }\r\n\r\n    saveImg(event) {\r\n        event.preventDefault()\r\n        html2canvas(document.querySelector(\"#capture\"), {\r\n            useCORS: true\r\n        }).then(canvas => {\r\n            // document.body.appendChild(canvas)\r\n            var tab = window.open('about:blank', '_blank');\r\n            tab.document.body.appendChild(canvas);\r\n            tab.document.close(); \r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <form className=\"meme-form\">\r\n                <Header />\r\n\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"topText\"\r\n                        placeholder=\"Top Text\"\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"bottomText\"\r\n                        placeholder=\"Bottom Text\"\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n\r\n                    <button onClick={this.handleSubmit}>Randomise!</button>\r\n                    <button onClick={this.saveImg}>Save</button>\r\n                </form>\r\n                <div></div>\r\n                <div className=\"meme\" id=\"capture\" >\r\n                    <img src={this.state.randomImg} alt=\"IMG\" />\r\n                    <h2 className=\"top\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator","import React from 'react';\nimport './App.css';\n\n// import Header from \"./Header\"\nimport MemeGenerator from \"./MemeGenerator\"\n\nfunction App() {\n  return (\n    <div >\n\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}